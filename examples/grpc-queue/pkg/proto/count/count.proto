syntax = "proto3";

package count;

// Строка для корректной интерпретации proto-структуры в языке Go
option go_package = "github.com/domage/grpc-queue/count";

// Конечные точки асинхронного веб-сервиса
service Count {
    // Подсчитать число слов в строке.
    // Возвращает идентификатор ответа, по кторому можно в дальнейшем получить результат,
    // вызвав процедуру QueueGetResult 
    rpc QueueProcess(QRequest) returns (QResultId) {}

    // Получить результат подсчета слов в строке.
    // Для получения результата необходимо передать идентификатор ответа,
    // полученный в результате вызова процедуры QueueProcess.
    // Если результат недоступен, то возвращается gRPC Status NOT FOUND 
    rpc QueueGetResult(QResultId) returns (QResult) {}
}

// Запрос, содержащий строку, число слов в которой будем считать
message QRequest {
    string wordsToCount =1;
}

// Идентификатор ответа, по которому можно получить результат подсчета, когда он будет доступен
message QResultId {
    int32 resultId =1;
}

// Результат подсчета. 
// Если результат доступен, то wordsCount содержит число слов в переданной строке
message QResult {
    int32 wordsCount = 1;
}

// Сообщение для передачи задачи на подсчет слов в строке в очередь RabbitMQ
// Поле resultId содержит идентификатор ответа, по которому можно получить результат подсчета, когда он будет доступен
message QProcessMessage {
    string wordsCount = 1;
    int32 resultId = 2;
}

// Сообщение для возвращения результатов подсчета слов в строке в очередь RabbitMQ
// Поле resultId содержит идентификатор ответа, по которому можно получить результат подсчета, когда он будет доступен
message QResultMessage {
    int32 wordsCount = 1;
    int32 resultId = 2;
}
