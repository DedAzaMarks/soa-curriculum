# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import count_pb2 as count__pb2


class CountStub(object):
    """Конечные точки асинхронного веб-сервиса
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueueProcess = channel.unary_unary(
                '/count.Count/QueueProcess',
                request_serializer=count__pb2.QRequest.SerializeToString,
                response_deserializer=count__pb2.QResultId.FromString,
                )
        self.QueueGetResult = channel.unary_unary(
                '/count.Count/QueueGetResult',
                request_serializer=count__pb2.QResultId.SerializeToString,
                response_deserializer=count__pb2.QResult.FromString,
                )


class CountServicer(object):
    """Конечные точки асинхронного веб-сервиса
    """

    def QueueProcess(self, request, context):
        """Подсчитать число слов в строке.
        Возвращает идентификатор ответа, по кторому можно в дальнейшем получить результат,
        вызвав процедуру QueueGetResult 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueueGetResult(self, request, context):
        """Получить результат подсчета слов в строке.
        Для получения результата необходимо передать идентификатор ответа,
        полученный в результате вызова процедуры QueueProcess.
        Если результат недоступен, то возвращается gRPC Status NOT FOUND 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CountServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueueProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.QueueProcess,
                    request_deserializer=count__pb2.QRequest.FromString,
                    response_serializer=count__pb2.QResultId.SerializeToString,
            ),
            'QueueGetResult': grpc.unary_unary_rpc_method_handler(
                    servicer.QueueGetResult,
                    request_deserializer=count__pb2.QResultId.FromString,
                    response_serializer=count__pb2.QResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'count.Count', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Count(object):
    """Конечные точки асинхронного веб-сервиса
    """

    @staticmethod
    def QueueProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/count.Count/QueueProcess',
            count__pb2.QRequest.SerializeToString,
            count__pb2.QResultId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueueGetResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/count.Count/QueueGetResult',
            count__pb2.QResultId.SerializeToString,
            count__pb2.QResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
